class Solution {
    class Pair{
        TreeNode node;
        int idx;
        Pair(TreeNode node,int idx){
            this.node=node;
            this.idx=idx;
        }
    }
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null){
            return 0;
        }
        int max=0;
        Queue<Pair> q=new LinkedList<>();
        q.add(new Pair(root,0));
        while(!q.isEmpty()){
            int size=q.size();
            int min=q.peek().idx;
            int first=0;
            int last=0;
            for(int i=0;i<size;i++){
                Pair current=q.poll();
                int idx=current.idx-min;
                TreeNode node=current.node;
                if(i==0){
                    first=idx;
                }
                if(i==size-1){
                    last=idx;
                }
                if(node.left!=null)
                    q.add(new Pair(node.left,2*idx));
                if(node.right!=null)
                    q.add(new Pair(node.right,2*idx+1));
            
            }
            max=Math.max(max,last-first+1);

        }
        return max;
    }
}